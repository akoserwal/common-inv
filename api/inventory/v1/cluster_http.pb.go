// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.0
// source: inventory/v1/cluster.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClusterServiceCreateCluster = "/api.inventory.v1.ClusterService/CreateCluster"
const OperationClusterServiceDeleteCluster = "/api.inventory.v1.ClusterService/DeleteCluster"
const OperationClusterServiceGetCluster = "/api.inventory.v1.ClusterService/GetCluster"
const OperationClusterServiceListClusters = "/api.inventory.v1.ClusterService/ListClusters"
const OperationClusterServiceUpdateCluster = "/api.inventory.v1.ClusterService/UpdateCluster"

type ClusterServiceHTTPServer interface {
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
}

func RegisterClusterServiceHTTPServer(s *http.Server, srv ClusterServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/inventory/v1.0/clusters", _ClusterService_ListClusters0_HTTP_Handler(srv))
	r.GET("/api/inventory/v1.0/clusters/{id}", _ClusterService_GetCluster0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1.0/clusters", _ClusterService_CreateCluster0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1.0/clusters/{id}", _ClusterService_UpdateCluster0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1.0/clusters/{id}", _ClusterService_DeleteCluster0_HTTP_Handler(srv))
}

func _ClusterService_ListClusters0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListClustersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceListClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClusters(ctx, req.(*ListClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClustersResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_GetCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClusterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCluster(ctx, req.(*GetClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_CreateCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateClusterRequest
		if err := ctx.Bind(&in.Cluster); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceCreateCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCluster(ctx, req.(*CreateClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_UpdateCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateClusterRequest
		if err := ctx.Bind(&in.Cluster); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceUpdateCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCluster(ctx, req.(*UpdateClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_DeleteCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteClusterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceDeleteCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCluster(ctx, req.(*DeleteClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteClusterResponse)
		return ctx.Result(200, reply)
	}
}

type ClusterServiceHTTPClient interface {
	CreateCluster(ctx context.Context, req *CreateClusterRequest, opts ...http.CallOption) (rsp *CreateClusterResponse, err error)
	DeleteCluster(ctx context.Context, req *DeleteClusterRequest, opts ...http.CallOption) (rsp *DeleteClusterResponse, err error)
	GetCluster(ctx context.Context, req *GetClusterRequest, opts ...http.CallOption) (rsp *GetClusterResponse, err error)
	ListClusters(ctx context.Context, req *ListClustersRequest, opts ...http.CallOption) (rsp *ListClustersResponse, err error)
	UpdateCluster(ctx context.Context, req *UpdateClusterRequest, opts ...http.CallOption) (rsp *UpdateClusterResponse, err error)
}

type ClusterServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewClusterServiceHTTPClient(client *http.Client) ClusterServiceHTTPClient {
	return &ClusterServiceHTTPClientImpl{client}
}

func (c *ClusterServiceHTTPClientImpl) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...http.CallOption) (*CreateClusterResponse, error) {
	var out CreateClusterResponse
	pattern := "/api/inventory/v1.0/clusters"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceCreateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Cluster, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...http.CallOption) (*DeleteClusterResponse, error) {
	var out DeleteClusterResponse
	pattern := "/api/inventory/v1.0/clusters/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceDeleteCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...http.CallOption) (*GetClusterResponse, error) {
	var out GetClusterResponse
	pattern := "/api/inventory/v1.0/clusters/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...http.CallOption) (*ListClustersResponse, error) {
	var out ListClustersResponse
	pattern := "/api/inventory/v1.0/clusters"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceListClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...http.CallOption) (*UpdateClusterResponse, error) {
	var out UpdateClusterResponse
	pattern := "/api/inventory/v1.0/clusters/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceUpdateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Cluster, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
