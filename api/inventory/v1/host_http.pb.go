// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.0
// source: inventory/v1/host.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHostServiceCreateHost = "/api.inventory.v1.HostService/CreateHost"
const OperationHostServiceDeleteHost = "/api.inventory.v1.HostService/DeleteHost"
const OperationHostServiceGetHost = "/api.inventory.v1.HostService/GetHost"
const OperationHostServiceListHosts = "/api.inventory.v1.HostService/ListHosts"
const OperationHostServiceUpdateHost = "/api.inventory.v1.HostService/UpdateHost"

type HostServiceHTTPServer interface {
	CreateHost(context.Context, *CreateHostRequest) (*CreateHostResponse, error)
	DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error)
	GetHost(context.Context, *GetHostRequest) (*GetHostResponse, error)
	ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error)
	UpdateHost(context.Context, *UpdateHostRequest) (*UpdateHostResponse, error)
}

func RegisterHostServiceHTTPServer(s *http.Server, srv HostServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/inventory/v1.0/hosts", _HostService_ListHosts0_HTTP_Handler(srv))
	r.GET("/api/inventory/v1.0/hosts/{id}", _HostService_GetHost0_HTTP_Handler(srv))
	r.POST("/api/inventory/v1.0/hosts", _HostService_CreateHost0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1.0/hosts/{id}", _HostService_UpdateHost0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1.0/hosts/{id}", _HostService_DeleteHost0_HTTP_Handler(srv))
}

func _HostService_ListHosts0_HTTP_Handler(srv HostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHostsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostServiceListHosts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHosts(ctx, req.(*ListHostsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHostsResponse)
		return ctx.Result(200, reply)
	}
}

func _HostService_GetHost0_HTTP_Handler(srv HostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostServiceGetHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHost(ctx, req.(*GetHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHostResponse)
		return ctx.Result(200, reply)
	}
}

func _HostService_CreateHost0_HTTP_Handler(srv HostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateHostRequest
		if err := ctx.Bind(&in.Host); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostServiceCreateHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHost(ctx, req.(*CreateHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateHostResponse)
		return ctx.Result(200, reply)
	}
}

func _HostService_UpdateHost0_HTTP_Handler(srv HostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateHostRequest
		if err := ctx.Bind(&in.Host); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostServiceUpdateHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHost(ctx, req.(*UpdateHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateHostResponse)
		return ctx.Result(200, reply)
	}
}

func _HostService_DeleteHost0_HTTP_Handler(srv HostServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostServiceDeleteHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHost(ctx, req.(*DeleteHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteHostResponse)
		return ctx.Result(200, reply)
	}
}

type HostServiceHTTPClient interface {
	CreateHost(ctx context.Context, req *CreateHostRequest, opts ...http.CallOption) (rsp *CreateHostResponse, err error)
	DeleteHost(ctx context.Context, req *DeleteHostRequest, opts ...http.CallOption) (rsp *DeleteHostResponse, err error)
	GetHost(ctx context.Context, req *GetHostRequest, opts ...http.CallOption) (rsp *GetHostResponse, err error)
	ListHosts(ctx context.Context, req *ListHostsRequest, opts ...http.CallOption) (rsp *ListHostsResponse, err error)
	UpdateHost(ctx context.Context, req *UpdateHostRequest, opts ...http.CallOption) (rsp *UpdateHostResponse, err error)
}

type HostServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewHostServiceHTTPClient(client *http.Client) HostServiceHTTPClient {
	return &HostServiceHTTPClientImpl{client}
}

func (c *HostServiceHTTPClientImpl) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...http.CallOption) (*CreateHostResponse, error) {
	var out CreateHostResponse
	pattern := "/api/inventory/v1.0/hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostServiceCreateHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Host, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostServiceHTTPClientImpl) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...http.CallOption) (*DeleteHostResponse, error) {
	var out DeleteHostResponse
	pattern := "/api/inventory/v1.0/hosts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHostServiceDeleteHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostServiceHTTPClientImpl) GetHost(ctx context.Context, in *GetHostRequest, opts ...http.CallOption) (*GetHostResponse, error) {
	var out GetHostResponse
	pattern := "/api/inventory/v1.0/hosts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHostServiceGetHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostServiceHTTPClientImpl) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...http.CallOption) (*ListHostsResponse, error) {
	var out ListHostsResponse
	pattern := "/api/inventory/v1.0/hosts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHostServiceListHosts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostServiceHTTPClientImpl) UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...http.CallOption) (*UpdateHostResponse, error) {
	var out UpdateHostResponse
	pattern := "/api/inventory/v1.0/hosts/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostServiceUpdateHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Host, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
